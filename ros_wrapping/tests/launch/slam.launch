<launch>
  <!-- General args -->
  <arg name="test_data"    default=""      doc="Path to the test data"/>
  <arg name="res_path"     default="/tmp"  doc="Path to the folder where to store the results"/>
  <arg name="ref_path"     default=""      doc="Path to the reference data folder for results comparison"/>
  <arg name="outdoor"      default="true"  doc="Decide which set of parameters to use"/>
  <arg name="vlp16"        default="false" doc="If true, start Velodyne VLP16 transform node."/>
  <arg name="wait_init"    default="1"     doc="Wait for test node initialization to replay data"/>

  <!-- Sim Time, used when replaying rosbag files (with mandatory option 'clock') -->
  <param name="/use_sim_time" value="true"/>

  <!-- LiDAR pointclouds conversions args. These are only used to generate
       approximate point-wise timestamps if 'time' field is not usable).
       These parameters should be set to the same values as ROS Velodyne driver's. -->
  <arg name="rpm" default="600." doc="Velodyne sensor spinning speed."/>
  <arg name="timestamp_first_packet" default="false" doc="If Velodyne timestamping is based on the first or last packet of each scan."/>

  <!-- Decode raw Velodyne packets to 3D points -->
  <group if="$(arg vlp16)">
    <node pkg="nodelet" type="nodelet" name="velodyne_nodelet_manager" args="manager" output="screen"/>
    <include file="$(find velodyne_pointcloud)/launch/transform_nodelet.launch">
      <arg name="manager"        value="velodyne_nodelet_manager" />
      <arg name="model"          value="VLP16"/>
      <arg name="calibration"    value="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
      <arg name="fixed_frame"    value="" />
      <arg name="target_frame"   value="" />
      <arg name="max_range"      value="130.0" />
      <arg name="min_range"      value="0.4" />
      <arg name="organize_cloud" value="false" />
    </include>
  </group>

  <!-- Velodyne points conversion -->
  <node name="velodyne_conversion" pkg="lidar_conversions" type="velodyne_conversion_node" output="screen">
    <param name="rpm" value="$(arg rpm)"/>
    <param name="timestamp_first_packet" value="$(arg timestamp_first_packet)"/>
  </node>

  <!-- Test : catch outputs and compare with reference -->
  <!-- If comparison is required, end process when the reference is finished -->
  <!-- If comparison is not required, end process when the bag ends -->
  <group if="$(eval arg('ref_path') == '')">
    <node name="test" pkg="lidar_slam_test" type="lidar_slam_test_node" output="screen" required="false">
      <rosparam file="$(find lidar_slam_test)/params/eval.yaml" command="load"/>
      <param name="res_path" value="$(arg res_path)"/>
    	<param name="ref_path" value="$(arg ref_path)"/>
    </node>
  </group>
  <group unless="$(eval arg('ref_path') == '')">
    <node name="test" pkg="lidar_slam_test" type="lidar_slam_test_node" output="screen" required="true">
      <rosparam file="$(find lidar_slam_test)/params/eval.yaml" command="load"/>
      <param name="res_path" value="$(arg res_path)"/>
    	<param name="ref_path" value="$(arg ref_path)"/>
    </node>
  </group>

  <!-- LiDAR SLAM : compute TF slam_init -> velodyne -->
  <node name="lidar_slam" pkg="lidar_slam" type="lidar_slam_node" output="screen">
    <rosparam if="$(arg outdoor)" file="$(find lidar_slam)/params/slam_config_outdoor.yaml" command="load"/>
    <rosparam unless="$(arg outdoor)" file="$(find lidar_slam)/params/slam_config_indoor.yaml" command="load"/>
    <param name="slam/n_threads" value="1"/>
    <param name="slam/overlap/sampling_ratio" value="0.33"/>
    <param name="slam/verbosity" value="0"/>
  </node>

  <!-- Moving base coordinates systems description            tf_FROM_to_TO           X  Y  Z  rZ rY rX  FROM     TO -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="tf_base_to_lidar" args="0  0  0  0  0  0 base_link velodyne"/>

  <!-- Play bag -->
  <!-- If comparison is required, end process when the reference is finished -->
  <!-- If comparison is not required, end process when the bag ends -->
  <group if="$(eval arg('ref_path') == '')">
    <node pkg="rosbag" type="play" name="player" output="screen" args="--quiet --clock $(arg test_data) -d $(arg wait_init)" required="true"/>
  </group>
  <group unless="$(eval arg('ref_path') == '')">
    <node pkg="rosbag" type="play" name="player" output="screen" args="--quiet --clock $(arg test_data) -d $(arg wait_init)" required="false"/>
  </group>

</launch>