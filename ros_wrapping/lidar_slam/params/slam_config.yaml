#####################################
#  Real-time LiDAR SLAM parameters  #
#####################################

## Number of vertical lasers in LiDAR sensor (optional : if not given, it will be guessed from 1st frame)
# n_lasers: 16

## Mapping from ring id to laser id (optional, default : identity mapping)
# laser_id_mapping: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# SLAM will compute the pose of tracking_frame in odometry_frame coordinates system, using measurements in input pointcloud frame.
odometry_frame: "odom"       # Frame in which SLAM odometry and maps are expressed (default: odom).
# tracking_frame: "base_link"  # Frame to track (default: input pointcloud frame_id; If different, ensure a valid TF tree is published).

# [Hz] Number of frames per second acquired by the LiDAR sensor (used to generate approximate point-wise timestamp)
lidar_frequency: 10.

# SLAM node outputs
# If set to true, LidarSlamNode will publish the given output to a topic or to the TF server (default to false if not specified).
output:
  pose:
    odom: true             # Publish SLAM pose as an Odometry msg on 'slam_odom' topic (default : true).
    tf: true               # Publish SLAM pose as a TF from 'odometry_frame' to 'tracking_frame' (default : true).
    predicted_odom: false  # Publish latency-corrected SLAM pose as an Odometry msg on 'slam_predicted_odom' topic.
    predicted_tf: false    # Publish latency-corrected SLAM pose as a TF from 'odometry_frame' to '<tracking_frame>_prediction'.
  maps:
    edges: true            # Publish edges keypoints map as a PointXYZTIId PointCloud2 msg to topic 'maps/edges'.
    planes: true           # Publish planes keypoints map as a PointXYZTIId PointCloud2 msg to topic 'maps/planes'.
    blobs: true            # Publish blobs keypoints map as a PointXYZTIId PointCloud2 msg to topic 'maps/blobs'.
  keypoints:
    edges: false           # Publish extracted edges keypoints from current frame as a PointCloud2 msg to topic 'keypoints/edges'.
    planes: false          # Publish extracted planes keypoints from current frame as a PointCloud2 msg to topic 'keypoints/planes'.
    blobs: false           # Publish extracted blobs keypoints from current frame as a PointCloud2 msg to topic 'keypoints/blobs'.
  debug:
    cloud: false           # Publish SLAM pointcloud as PointXYZTIId PointCloud2 msg to topic 'slam_cloud'.

# Pointclouds saving to PCD files.
# To save keypoints maps, send command SlamCommand::SAVE_KEYPOINTS_MAPS to 'slam_command' topic.
maps_saving:
  pcd_format: 2  # Save with given PCD file format : 0) ascii,  1) binary,  2) binary_compressed.

# Optional GPS position use (if 'gps/use_gps'=true), subscribing to Odometry msg on 'gps_odom' topic.
# It allows to estimate calibration between GPS and SLAM trajectories,
# or post-optimize SLAM trajectory with pose graph optimization (PGO).
gps:

  # Optional GPS positions use to calibrate output SLAM pose to world coordinates and/or optimize SLAM trajectory.
  # If true, subscribes to topic 'gps_odom' (nav_msgs/Odometry), and logs GPS positions during 'slam/logging_timeout' seconds.
  # (WARNING Can be overridden in slam.launch with 'gps' arg).
  use_gps: false

  # Approximate GPS/SLAM calibration (available if use_gps=true)
  # Fit GPS trajectory to SLAM trajectory with ICP to estimate the rigid transform that links 'gps_odom/header/frame_id'
  # to 'odometry_frame', and publish it to static TF server, linking SLAM pose to world coordinates.
  # GPS/SLAM calibration can be triggered by sending SlamCommand::GPS_SLAM_CALIBRATION to 'slam_command' topic.
  calibration:
    no_roll: false            # If true, impose calibration to have no roll rotation. DEBUG
    publish_icp_paths: false  # If true, publish ICP-aligned GPS and SLAM trajectories to 'icp_gps_path' and 'icp_slam_path' latched topics.

  # Pose Graph Optimization (PGO) (available if use_gps=true)
  # Use GPS positions and covariances to optimize SLAM trajectory and maps by correcting drift,
  # and more precisely link SLAM pose to world coordinates.
  # PGO can be triggered by sending SlamCommand::GPS_SLAM_POSE_GRAPH_OPTIMIZATION to 'slam_command' topic.
  # WARNING : this process is not real-time.
  pgo:
    g2o_file: "/home/user/pgo.g2o"  # Save pose graph to file (or do not save if null string or unset).
    publish_path: false             # If true, publish optimized SLAM trajectory to 'pgo_slam_path' latched topic.

# SLAM parameters (see Slam.h for description). Comment parameter to get default value.
slam:

  # Verbosity level :
  #  0) print errors, warnings or one time info
  #  1) 0 + frame number, total frame processing time
  #  2) 1 + extracted features, used keypoints, mapping variance, ego-motion and localization summary
  #  3) 2 + sub-problems processing duration
  #  4) 3 + ceres optimization summary
  #  5) 4 + logging/maps memory usage
  verbosity: 3

  n_threads: 1         # Max number of threads to use for parallel processing
  fast_slam: true      # Use only planars keypoints used during EgoMotion for Mapping step, and not all.
  undistortion: false  # Undistort the frame to correct rolling shutter distortion. DEBUG

  # Optional logging of computed pose, mapping covariance and keypoints of each processed frame.
  #  - A value of 0. will disable logging.
  #  - A negative value will log all incoming data, without any timeout.
  #  - A positive value will keep only most recent data, forgetting all previous data older than LoggingTimeout seconds.
  # Logged data will be used for pose graph optimization or GPS antenna/LiDAR sensor calibration using GPS data.
  logging_timeout: 0.  # [s]

  # How to store pointclouds data during keypoints logging (if logging_timeout != 0):
  #  0) PCL pointcloud                    (in RAM,     no compression,      no overhead)
  #  1) Octree compressed binary data     (in RAM,    ~5x compression,   ~3 ms overhead)
  #  2) Ascii format PCD file             (on disk, ~0.6x compression,   ~5 ms overhead)
  #  3) Binary format PCD file            (on disk, ~1.3x compression, ~0.3 ms overhead)
  #  4) Binary compressed format PCD file (on disk, ~1.5x compression, ~0.8 ms overhead)
  logging_storage: 0

  max_distance_for_ICP_matching: 20.            # [m] Max distance allowed between two keypoints during ICP matching.

  # ICP and LM parameters for Ego-Motion step
  ego_motion:
    ICP_max_iter: 4                     # Max number of iterations of ICP matching.
    LM_max_iter: 15                     # Max number of iteration in the ego motion LM optimization step.
    line_distance_nbr_neighbors: 8      # Number of nearest neighbors to look for in previous frame (all scan lines considered) to build line model.
    minimum_line_neighbor_rejection: 3  # Min number of valid nearest neighbors (max 1 per scan line) to keep neighborhood to build line model.
    line_distance_factor: 5.            # PCA eigenvalues ratio to consider a neighborhood fits a line model (V2 > factor * V1).
    plane_distance_nbr_neighbors: 5     # Number of nearest neighbors to look for in previous frame to build plane model.
    plane_distance_factor1: 35.         # PCA eigenvalues ratio to consider a neighborhood fits a plane model :
    plane_distance_factor2: 8.          #   V2 < factor2 * V1  and  V1 > factor1 * V0
    max_line_distance: 0.2              # [m] Max distance to line model allowed to keep neighborhood.
    max_plane_distance: 0.2             # [m] Max distance to plane model allowed to keep neighborhood.
    init_loss_scale: 2.                 # Initial arctan loss scale factor to modify saturation (L(s) = scale * arctan(s/scale))
    final_loss_scale: 0.2               # Final arctan loss scale factor to modify saturation (L(s) = scale * arctan(s/scale))

  # ICP and LM parameters for Mapping step
  mapping:
    ICP_max_iter: 3                     # Max number of iterations of ICP matching.
    LM_max_iter: 15                     # Max number of iteration in the ego motion LM optimization step.
    line_distance_nbr_neighbors: 10     # Number of nearest neighbors to look for in map to build line model.
    minimum_line_neighbor_rejection: 4  # Min number of valid nearest neighbors (close to line model) to keep neighborhood to conisder line model.
    line_distance_factor: 5.            # PCA eigenvalues ratio to consider a neighborhood fits a line model (V2 > factor * V1).
    plane_distance_nbr_neighbors: 5     # Number of nearest neighbors to look for in map to build plane model.
    plane_distance_factor1: 35.         # PCA eigenvalues ratio to consider a neighborhood fits a plane model :
    plane_distance_factor2: 8.          #   V2 < factor2 * V1  and  V1 > factor1 * V0
    max_line_distance: 0.2              # [m] Max distance to line model allowed to keep neighborhood.
    max_plane_distance: 0.2             # [m] Max distance to plane model allowed to keep neighborhood.
    line_max_dist_inlier: 0.2           # [m] Max distance of current point to tested line model so that it votes for the validity of this model
    init_loss_scale: 0.7                # Initial arctan loss scale factor to modify saturation (L(s) = scale * arctan(s/scale))
    final_loss_scale: 0.05              # Final arctan loss scale factor to modify saturation (L(s) = scale * arctan(s/scale))

  # Keypoints maps, saved as downsampled voxel grids
  voxel_grid:
    leaf_size_edges: 0.30   # [m] Resolution used to downsample the edges map with a VoxelGrid filter.
    leaf_size_planes: 0.60  # [m] Resolution used to downsample the planes map with a VoxelGrid filter.
    leaf_size_blobs: 0.30   # [m] Resolution used to downsample the blobs map with a VoxelGrid filter.
    size: 50                # [voxels] Size of the voxel grid used to store keypoints maps : n*n*n voxels.
    resolution: 10.         # [m/voxel] Resolution of a voxel.

  # Keypoints extraction
  ke:
    angle_resolution: 0.00698          # [rad] Maximal angular resolution of the lidar azimutal resolution.
    min_distance_to_sensor: 3.         # [m] Minimal point to sensor distance to consider a point as valid.
    neighbor_width: 4                  # [>1] Width of the neighborhood used to compute discrete differential operators.
    plane_sin_angle_threshold: 0.5     # [0-1] Sharpness threshold to select a planar keypoint (selected if sin angle is less than threshold).
    edge_sin_angle_threshold: 0.86     # [0-1] Sharpness threshold to select an edge keypoint (selected if sin angle is more than threshold).
    edge_depth_gap_threshold: 0.15     # [m] Threshold upon depth gap in neighborhood to select an edge keypoint.
    edge_saliency_threshold: 1.5       # [m] Threshold upon saliency of a neighborhood to select an edge keypoint.
    edge_intensity_gap_threshold: 50.  # [0-255] Threshold upon intensity gap to select an edge keypoint.