diff --git a/CMakeLists.txt b/CMakeLists.txt
index bcb86c5..325aa43 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -97,7 +97,7 @@ if(NOT TARGET Eigen3::Eigen)
     set(BUILD_TESTING ${BUILD_TESTING_PREV_VALUE} CACHE BOOL "Build the testing tree." FORCE)
   else()
     message(STATUS "Finding external Eigen")
-    find_package(Eigen3 3.4 REQUIRED)
+    find_package(Eigen3 REQUIRED)
   endif()
 else()
   message(STATUS "Eigen already available")
@@ -110,7 +110,7 @@ if(NOT TARGET Sophus::Sophus)
     message(STATUS "Including internal Sophus from submodule")
     set(BUILD_SOPHUS_TESTS OFF CACHE BOOL "disable BUILD_SOPHUS_TESTS")
     set(BUILD_SOPHUS_EXAMPLES OFF CACHE BOOL "disable BUILD_SOPHUS_EXAMPLES")
-    add_subdirectory(thirdparty/Sophus EXCLUDE_FROM_ALL)
+    add_subdirectory(thirdparty/Sophus)
   else()
     message(STATUS "Finding external Sophus")
     find_package(Sophus REQUIRED)
@@ -124,7 +124,7 @@ option(BASALT_BUILTIN_CEREAL "Use builtin Cereal from submodule" ON)
 if(NOT TARGET cereal::cereal)
   if(BASALT_BUILTIN_CEREAL)
     message(STATUS "Including internal Cereal from submodule")
-    add_subdirectory(thirdparty/cereal EXCLUDE_FROM_ALL)
+    add_subdirectory(thirdparty/cereal)
   else()
     message(STATUS "Finding external Cereal")
     find_package(cereal REQUIRED)
@@ -144,42 +144,55 @@ target_include_directories(basalt-headers INTERFACE
     "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
 )
 
-# List all header files with target_sources.
-# This ensures, e.g., that QtCreator >= 6.0 properly recognize these headers to belong to the project.
-# To support cmake < 3.13, use absolute paths (see: https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/)
-target_sources(basalt-headers
-  INTERFACE
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/calibration/calib_bias.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/calibration/calibration.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/bal_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/camera_static_assert.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/double_sphere_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/extended_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/fov_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/generic_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/kannala_brandt_camera4.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/pinhole_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/stereographic_param.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/unified_camera.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/image/image.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/image/image_pyr.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/imu/imu_types.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/imu/preintegration.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/serialization/eigen_io.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/serialization/headers_serialization.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/ceres_local_param.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/ceres_spline_helper.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/rd_spline.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/se3_spline.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/so3_spline.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/spline_common.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/assert.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/eigen_utils.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/hash.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/sophus_utils.hpp
-)
-
 if((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME OR BASALT_HEADERS_BUILD_TESTING) AND BUILD_TESTING)
   enable_testing()
   add_subdirectory(test)
 endif()
+
+# Add CMake config files to install the header-only library
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(
+    "${PROJECT_SOURCE_DIR}/cmake/basalt-headers.cmake.in"
+    "${PROJECT_BINARY_DIR}/basalt-headersConfig.cmake"
+    INSTALL_DESTINATION lib/cmake/basalt-headers
+)
+
+write_basic_package_version_file(
+    "${PROJECT_BINARY_DIR}/basalt-headersConfigVersion.cmake"
+    VERSION ${PROJECT_VERSION}
+    COMPATIBILITY SameMajorVersion
+)
+
+# list target to install
+set (TARGET_TO_INSTALL basalt-headers)
+if (BASALT_BUILTIN_EIGEN)
+  list(APPEND TARGET_TO_INSTALL eigen)
+endif()
+if(BASALT_BUILTIN_SOPHUS)
+  list(APPEND TARGET_TO_INSTALL sophus)
+endif()
+if(BASALT_BUILTIN_CEREAL)
+  list(APPEND TARGET_TO_INSTALL cereal)
+endif()
+
+message(STATUS "value list target : ${TARGET_TO_INSTALL}")
+
+
+install(TARGETS ${TARGET_TO_INSTALL}
+        EXPORT basalt-headersTargets
+        PUBLIC_HEADER DESTINATION "include" COMPONENT Development
+)
+
+install(EXPORT basalt-headersTargets
+        DESTINATION lib/cmake/basalt-headers
+)
+
+install(FILES "${PROJECT_BINARY_DIR}/basalt-headersConfigVersion.cmake"
+              "${PROJECT_BINARY_DIR}/basalt-headersConfig.cmake"
+        DESTINATION "lib/cmake/basalt-headers"
+)
+
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/
+        DESTINATION "include"
+)
diff --git a/cmake/basalt-headers.cmake.in b/cmake/basalt-headers.cmake.in
new file mode 100644
index 0000000..e92bf85
--- /dev/null
+++ b/cmake/basalt-headers.cmake.in
@@ -0,0 +1,12 @@
+
+@PACKAGE_INIT@
+
+
+include (CMakeFindDependencyMacro)
+
+find_dependency(Eigen3 REQUIRED)
+find_dependency(Sophus REQUIRED)
+find_dependency(cereal REQUIRED)
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+check_required_components("@PROJECT_NAME@")
