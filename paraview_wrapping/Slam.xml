<ServerManagerConfiguration>
  <!-- Begin Online Slam -->
  <ProxyGroup name="filters">
    <SourceProxy name="Slam (Online)" class="vtkSlam" label="Slam (Online)">
      <Documentation
        short_help="Performs SLAM algorithm on the Lidar sensor's point cloud"
        long_help="Performs SLAM algorithm on the Lidar sensor's point cloud.
                   The SLAM algorithm is composed of three sequential steps:
                   - Sampling strategy: extract keypoints that provide strong geometric information
                   - Ego Motion: Sensor motion estimation between two frames
                   - Mapping: Map the frame in an environment map">
        Filter which performs slam on pointcloud data
      </Documentation>

      <InputProperty
         name="Input"
         label="Point Cloud"
         port_index="0"
         command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData"/>
        </DataTypeDomain>
        <Documentation>
          Set the input point cloud
        </Documentation>
      </InputProperty>

      <InputProperty
         name="Calibration"
         port_index="1"
         command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkTable"/>
        </DataTypeDomain>
        <Documentation>
          Set the LiDAR calibration
        </Documentation>
      </InputProperty>

      <OutputPort name="Last Frame processed" index="0" id="port0" />
      <OutputPort name="Trajectory" index="1" id="port1" />
      <OutputPort name="Edge Map" index="2" id="port2" />
      <OutputPort name="Planar Map" index="3" id="port3" />
      <OutputPort name="Blob Map" index="4" id="port4" />
      <OutputPort name="Current edge keypoints" index="5" id="port5" />
      <OutputPort name="Current planar keypoints" index="6" id="port6" />
      <OutputPort name="Current blob keypoints" index="7" id="port7" />

      <!-- =============== Paraview filter outputs options =============== -->

      <Property
          name="Reset state"
          command="Reset">
        <Documentation>
          Reset SLAM internal state : maps and trajectory are cleared, and
          current pose is set back to origin.
          This keeps parameters unchanged.
        </Documentation>
      </Property>

      <IntVectorProperty
          name="Advanced return mode"
          command="SetAdvancedReturnMode"
          default_values="0"
          number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If advanced return mode is enabled, extra arrays are added to the
          outputs to display some of the SLAM internal variables :

           - Trajectory : matching summary, localization error summary

           - Output transformed frame : saliency, planarity, intensity gap, keypoint validity

           - Extracted keypoints : ICP matching results

          It is very useful when debugging or checking the SLAM behavior.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Output keypoints maps"
          command="SetOutputKeypointsMaps"
          default_values="1"
          number_of_elements="1"
          panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>
          If enabled, SLAM filter will output keypoints maps.
          Otherwise, these filter outputs are left empty to save time.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Output current keypoints"
          command="SetOutputCurrentKeypoints"
          default_values="1"
          number_of_elements="1"
          panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>
          If enabled, SLAM filter will output keypoints extracted from current
          frame. Otherwise, these filter outputs are left empty to save time.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Output keypoints in WORLD coordinates"
          command="SetOutputKeypointsInWorldCoordinates"
          default_values="1"
          number_of_elements="1"
          panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>
          If disabled, return raw keypoints extracted from current frame in BASE
          coordinates, without undistortion.

          If enabled, return keypoints in WORLD coordinates, optionally
          undistorted if undistortion is activated.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Output current keypoints"
                                   value="1" />
        </Hints>
      </IntVectorProperty>

      <PropertyGroup label="Filter outputs options">
        <Property name="Reset state" />
        <Property name="Advanced return mode" />
        <Property name="Output keypoints maps" />
        <Property name="Output current keypoints" />
        <Property name="Output keypoints in WORLD coordinates" />
      </PropertyGroup>

      <!-- ==================== General ==================== -->

      <IntVectorProperty
          name="Verbosity Level"
          command="SetVerbosity"
          default_values="0"
          number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry value="0" text="0) Errors, warnings or one time info"/>
          <Entry value="1" text="1) 0 + Frame total processing duration"/>
          <Entry value="2" text="2) 1 + Main steps summary"/>
          <Entry value="3" text="3) 2 + Sub-problems processing duration"/>
          <Entry value="4" text="4) 3 + Ceres optimization summary"/>
          <Entry value="5" text="5) 4 + Logging/maps memory usage"/>
        </EnumerationDomain>
        <Documentation>
          Indicate verbosity level to display more or less information in console:

           (0) print errors, warnings or one time info;

           (1) 0 + frame number and total processing duration;

           (2) 1 + extracted features, used keypoints, mapping variance, ego-motion and localization summary;

           (3) 2 + sub-problems processing duration;

           (4) 3 + ceres optimization summary;

           (5) 4 + logging/maps memory usage.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Fast Slam"
          command="SetFastSlam"
          default_values="1"
          number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If fast slam is enabled, we don't use blob keypoints
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Ego-Motion Mode"
          command="SetEgoMotion"
          default_values="1"
          number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Disabled"/>
          <Entry value="1" text="Motion extrapolation"/>
          <Entry value="2" text="Registration on previous frame"/>
          <Entry value="3" text="Motion extrapolation + Registration"/>
        </EnumerationDomain>
        <Documentation>
          How to estimate Ego-Motion (approximate relative motion since last frame).
          The ego-motion step aims to give a fast and approximate initialization of new
          frame world pose to ensure faster and more precise convergence in Localization step.

          If DISABLED, no ego-motion step is performed : relative motion is Identity, new estimated
          Tworld is equal to previous Tworld. Fast, but may lead to unstable and imprecise
          Localization step if motion is important.

          If MOTION EXTRAPOLATION, previous motion is linearly extrapolated to estimate new Tworld pose
          from the 2 previous poses. Fast and precise if motion is roughly constant and continuous.

          If REGISTRATION ON PREVIOUS FRAME, Trelative (and therefore Tworld) is estimated by globally
          registering new frame on previous frame. Slower and need textured enough environment, but do not
          rely on constant motion hypothesis.

          If MOTION EXTRAPOLATION + REGISTRATION ON PREVIOUS FRAME, previous motion is linearly extrapolated
          to estimate new Tworld pose from the 2 previous poses. Then this estimation is refined by globally
          registering new frame on previous frame. Slower and need textured enough environment, but should
          be more precise and rely less on constant motion hypothesis.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Undistortion Mode"
          command="SetUndistortion"
          default_values="1"
          number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Disabled"/>
          <Entry value="1" text="Approximated"/>
          <Entry value="2" text="Optimized"/>
        </EnumerationDomain>
        <Documentation>
          Undistortion mode, to correct rolling shutter distortion during a
          whole sweep during Lidar frame acquisition. This might be slower
          and unstable in case of jumps.

          If DISABLED, SLAM will compute a rigid transform that will be applied
          to the whole frame without taking into account the distortion due to
          the lidar motion during a sweep.

          If APPROXIMATED, current beginning sweep pose will be guessed using a
          constant speed motion model from previous and current end sweep poses.
          Then, linear undistortion between current begin and end poses is applied.

          If OPTIMIZED, both current begin and end sweep poses are optimized.
          Then, linear undistortion between current begin and end poses is applied.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Number of threads"
          command="SetNbThreads"
          default_values="1"
          number_of_elements="1">
        <IntRangeDomain name="range" min="1" max="16"/>
        <Documentation>
          Max number of threads to use for parallel processing.
        </Documentation>
      </IntVectorProperty>

      <PropertyGroup label="General Parameters">
        <Property name="Verbosity Level" />
        <Property name="Fast Slam" />
        <Property name="Ego-Motion Mode" />
        <Property name="Undistortion Mode" />
        <Property name="Number of threads" />
      </PropertyGroup>

      <!-- ================ Keypoints extraction Parameters ================ -->

      <ProxyProperty
        name="KeyPointsExtractor"
        command="SetKeyPointsExtractor"
        label="KeyPointsExtractor">
        <ProxyListDomain name="proxy_list">
          <Group name="KeyPointsExtractor"/>
        </ProxyListDomain>
      </ProxyProperty>

      <!-- ==================== BASE to LIDAR transform ==================== -->

      <DoubleVectorProperty
          name="Translation"
          command="SetBaseToLidarTranslation"
          default_values="0 0 0"
          number_of_elements="3"
          panel_visibility="advanced">
        <Documentation>
          Position of the LiDAR sensor in BASE coordinate system (X, Y, Z).

          It is often useful to track a BASE pose instead of LiDAR sensor pose.
          If set, this parameter transform all input pointcloud into BASE coordinate
          system in order to output BASE trajectory.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Rotation"
          command="SetBaseToLidarRotation"
          default_values="0 0 0"
          number_of_elements="3"
          panel_visibility="advanced">
        <Documentation>
          Rotation of the LiDAR sensor in BASE coordinate system (rX, rY, rZ, euler angles in ZYX convention, in degrees).

          It is often useful to track a BASE pose instead of LiDAR sensor pose.
          If set, this parameter transform all input pointcloud into BASE coordinate
          system in order to output BASE trajectory.
        </Documentation>
      </DoubleVectorProperty>

      <PropertyGroup label="Base to LiDAR transform">
        <Property name="Translation" />
        <Property name="Rotation" />
      </PropertyGroup>

      <!-- ==================== Ego Motion Parameters ==================== -->

      <IntVectorProperty
          name="Lev-Mardt Maximum Iteration EM"
          command="SetEgoMotionLMMaxIter"
          default_values="15"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          The sensor motion estimation is performed using an ICP Mahalanobis
          distance function. This lead to a numerical optimization problem with a
          non-linear least square cost function (with a loss-function). To solve this
          optimization problem we use the Levenberg-Marquardt algorithm which is an iterative
          algorithm.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="ICP Maximum Iteration EM"
          command="SetEgoMotionICPMaxIter"
          default_values="4"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          The sensor motion estimation is performed using an ICP Mahalanobis
          distance function. The ICP algorithm is an iterative algorithm and the number
          of iteration has to be set
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Nb Edges Neighbors Minimum After Ransac EM"
          command="SetEgoMotionMinimumLineNeighborRejection"
          default_values="3"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          In the Ego-Motion step, the neighborhood of an edge keypoint
          is fitted using a ransac algorithm. This parameter sets the
          minimum number of inliers we want to keep currently considered point
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Nb Edge Neighbors EM"
          command="SetEgoMotionLineDistanceNbrNeighbors"
          default_values="8"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          K-nearest neighbors points to consider to compute the Variance-Covariance
          matrix of the neighborhood to define the Mahalanobis distance function.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Nb Plane Neighbors EM"
          command="SetEgoMotionPlaneDistanceNbrNeighbors"
          default_values="5"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          K-nearest neighbors points to consider to compute the Variance-Covariance
          matrix of the neighborhood to define the Mahalanobis distance function.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
          name="Linearity Factor EM"
          command="SetEgoMotionLineDistancefactor"
          default_values="5"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject an edge keypoint if its neighborhood is not distributed
          along a line :

          eigenvalue1 > Factor x eigenvalue2
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Planarity Factor 1 EM"
          command="SetEgoMotionPlaneDistancefactor1"
          default_values="35"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject a planar keypoint if its neighborhood is not distributed
          along a plane:

          Factor1 x eigenvalue2 > eigenvalue1

          eigenvalue2 > Factor2 x eigenvalue3
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Planarity Factor 2 EM"
          command="SetEgoMotionPlaneDistancefactor2"
          default_values="8"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject a planar keypoint if its neighborhood is not distributed
          along a plane:

          Factor1 x eigenvalue2 > eigenvalue1

          eigenvalue2 > Factor2 x eigenvalue3
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Max Edge-Neighbors Distance To Fitted Line EM"
          command="SetEgoMotionMaxLineDistance"
          default_values="0.2"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject an edge point if its neighborhood has points that
          are too far from the fitted line (degenerated ellipsoid)
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Max Plane-Neighbors Distance To Fitted Plane EM"
          command="SetEgoMotionMaxPlaneDistance"
          default_values="0.2"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject a planar point if its neighborhood has points that
          are too far from the fitted plane (degenerated ellipsoid)
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Init Loss Scale EM"
          command="SetEgoMotionInitLossScale"
          default_values="2.0"
          number_of_elements="1"
          panel_visibility="advanced">
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Final Loss Scale EM"
          command="SetEgoMotionFinalLossScale"
          default_values="0.2"
          number_of_elements="1"
          panel_visibility="advanced">
      </DoubleVectorProperty>

      <PropertyGroup label="Ego-Motion ICP Matching And Optimization Parameters">
        <Property name="Lev-Mardt Maximum Iteration EM" />
        <Property name="ICP Maximum Iteration EM" />
        <Property name="Nb Edges Neighbors Minimum After Ransac EM" />
        <Property name="Nb Edge Neighbors EM" />
        <Property name="Nb Plane Neighbors EM" />
        <Property name="Linearity Factor EM" />
        <Property name="Planarity Factor 1 EM" />
        <Property name="Planarity Factor 2 EM" />
        <Property name="Max Edge-Neighbors Distance To Fitted Line EM" />
        <Property name="Max Plane-Neighbors Distance To Fitted Plane EM" />
        <Property name="Init Loss Scale EM" />
        <Property name="Final Loss Scale EM" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Ego-Motion registration"
                                   value="1" />
        </Hints>
      </PropertyGroup>

      <!-- ==================== Mapping Parameters ==================== -->

      <IntVectorProperty
          name="Lev-Mardt Maximum Iteration"
          command="SetMappingLMMaxIter"
          default_values="15"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          The sensor motion estimation is performed using an ICP Mahalanobis
          distance function. This lead to a numerical optimization problem with a
          non-linear least square cost function (with a loss-function). To solve this
          optimization problem we use the Levenberg-Marquardt algorithm which is an iterative
          algorithm.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="ICP Maximum Iteration"
          command="SetMappingICPMaxIter"
          default_values="3"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          The sensor motion estimation is performed using an ICP Mahalanobis
          distance function. The ICP algorithm is an iterative algorithm and the number
          of iteration has to be set
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Nb Edges Neighbors Minimum After Ransac"
          command="SetMappingMinimumLineNeighborRejection"
          default_values="4"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          In the Mapping step, the neighborhood of an edge keypoint
          is fitted using a ransac algorithm. This parameter sets the
          minimum number of inliers we want to keep currently considered point
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Nb Edge Neighbors"
          command="SetMappingLineDistanceNbrNeighbors"
          default_values="10"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          K-nearest neighbors points to consider to compute the Variance-Covariance
          matrix of the neighborhood to define the Mahalanobis distance function.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Nb Plane Neighbors"
          command="SetMappingPlaneDistanceNbrNeighbors"
          default_values="5"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          K-nearest neighbors points to consider to compute the Variance-Covariance
          matrix of the neighborhood to define the Mahalanobis distance function.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
          name="Linearity Factor"
          command="SetMappingLineDistancefactor"
          default_values="5"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject an edge keypoint if its neighborhood is not distributed
          along a line :

          eigenvalue1 > Factor x eigenvalue2
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Planarity Factor 1"
          command="SetMappingPlaneDistancefactor1"
          default_values="35"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject a planar keypoint if its neighborhood is not distributed
          along a plane:

          Factor1 x eigenvalue2 > eigenvalue1

          eigenvalue2 > Factor2 x eigenvalue3
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Planarity Factor 2"
          command="SetMappingPlaneDistancefactor2"
          default_values="8"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject a planar keypoint if its neighborhood is not distributed
          along a plane:

          Factor1 x eigenvalue2 > eigenvalue1

          eigenvalue2 > Factor2 x eigenvalue3
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Maximum Inlier Distance Ransac Line Fitting"
          command="SetMappingLineMaxDistInlier"
          default_values="0.2"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject an edge point if its neighborhood has points that
          are too far from the fitted line (degenerated ellipsoid)
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Max Edge-Neighbors Distance To Fitted Line"
          command="SetMappingMaxLineDistance"
          default_values="0.2"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject an edge point if its neighborhood has points that
          are too far from the fitted line (degenerated ellipsoid)
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Max Plane-Neighbors Distance To Fitted Plane"
          command="SetMappingMaxPlaneDistance"
          default_values="0.2"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Reject a planar point if its neighborhood has points that
          are too far from the fitted plane (degenerated ellipsoid)
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Init Loss Scale"
          command="SetMappingInitLossScale"
          default_values="0.7"
          number_of_elements="1"
          panel_visibility="advanced">
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Final Loss Scale"
          command="SetMappingFinalLossScale"
          default_values="0.05"
          number_of_elements="1"
          panel_visibility="advanced">
      </DoubleVectorProperty>

      <PropertyGroup label="Mapping ICP Matching And Optimization Parameters">
        <Property name="Lev-Mardt Maximum Iteration" />
        <Property name="ICP Maximum Iteration" />
        <Property name="Nb Edges Neighbors Minimum After Ransac" />
        <Property name="Nb Edge Neighbors" />
        <Property name="Nb Plane Neighbors" />
        <Property name="Linearity Factor" />
        <Property name="Planarity Factor 1" />
        <Property name="Planarity Factor 2" />
        <Property name="Maximum Inlier Distance Ransac Line Fitting" />
        <Property name="Max Edge-Neighbors Distance To Fitted Line" />
        <Property name="Max Plane-Neighbors Distance To Fitted Plane" />
        <Property name="Init Loss Scale" />
        <Property name="Final Loss Scale" />
      </PropertyGroup>

      <!-- ==================== Map Parameters ==================== -->

      <DoubleVectorProperty
          name="Map Edges Voxel Grid Leaf Size"
          command="SetVoxelGridLeafSizeEdges"
          default_values="0.3"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
            Size of the leaf when downsampling the environment map using
            a voxel grid filter. It should not be too big or some high
            frequency geometric information will be lost. It should not
            be too low or the geometric information will be too local
          </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Map Planes Voxel Grid Leaf Size"
          command="SetVoxelGridLeafSizePlanes"
          default_values="0.6"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
            Size of the leaf when downsampling the environment map using
            a voxel grid filter. It should not be too big or some high
            frequency geometric information will be lost. It should not
            be too low or the geometric information will be too local
          </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Map Blobs Voxel Grid Leaf Size"
          command="SetVoxelGridLeafSizeBlobs"
          default_values="0.3"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
            Size of the leaf when downsampling the environment map using
            a voxel grid filter. It should not be too big or some high
            frequency geometric information will be lost. It should not
            be too low or the geometric information will be too local
          </Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty
          name="Map Voxel Grid Size"
          command="SetVoxelGridSize"
          default_values="50"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
            Size of the map used to store the keypoints (number of voxels
            in each direction). The map needs to have a size sufficient to
            store at least one frame.
          </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
          name="Map Voxel Grid Resolution"
          command="SetVoxelGridResolution"
          default_values="10."
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
            Resolution of the map (meters per voxel). It should not be too big
            or too much points will be considered when trying to match the frame at
            the current position. This do not impact accuracy but only speed.
          </Documentation>
      </DoubleVectorProperty>

      <PropertyGroup label="Map Parameters">
        <Property name="Map Edges Voxel Grid Leaf Size" />
        <Property name="Map Planes Voxel Grid Leaf Size" />
        <Property name="Map Blobs Voxel Grid Leaf Size" />
        <Property name="Map Voxel Grid Size" />
        <Property name="Map Voxel Grid Resolution" />
      </PropertyGroup>

    </SourceProxy>
  </ProxyGroup>
  <!-- End Online Slam -->

  <!-- Begin Offline Slam -->
  <ProxyGroup name="filters">
    <SourceProxy
      name="Slam (Offline)"
      class="vtkSlamManager"
      label="Slam (Offline)"
      base_proxygroup="filters"
      base_proxyname="Slam (Online)">
      <Documentation
        short_help="Performs SLAM algorithm on the Lidar sensor's point cloud"
        long_help="Performs SLAM algorithm on the Lidar sensor's point cloud.
                   The SLAM algorithm is composed of three sequential steps:
                   - Sampling strategy: extract keypoints that provide strong geometric information
                   - Ego Motion: Sensor motion estimation between two frames
                   - Mapping: Map the frame in a environment map">
        Filter which performs slam on point cloud data.
      </Documentation>

      <IntVectorProperty
          name="All Frames"
          command="SetAllFrames"
          default_values="1"
          number_of_elements="1">
          <BooleanDomain name="bool" />
        <Documentation>
          Process all frames
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="First Frame"
          command="SetFirstFrame"
          default_values="0"
          number_of_elements="1">
          <Hints>
            <PropertyWidgetDecorator type="EnableWidgetDecorator">
              <Property name="All Frames" function="boolean_invert" />
            </PropertyWidgetDecorator>
          </Hints>
        <Documentation>
          Set the first frame to process
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="Last Frame"
          command="SetLastFrame"
          default_values="0"
          number_of_elements="1">
          <Hints>
            <PropertyWidgetDecorator type="EnableWidgetDecorator">
              <Property name="All Frames" function="boolean_invert" />
            </PropertyWidgetDecorator>
          </Hints>
        <Documentation>
          Set the last frame to process
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
          name="StepSize"
          command="SetStepSize"
          default_values="1"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Process one frame every StepSize frames
          (example: every (1) frame, every 2 frames, every 3 frames, and so on).
          A StepSize of 1 (the default value) means that all frames between the
          first and the last (included) will be used. This property can be
          useful to trade robustness (StepSize equal to 1) and accuracy for
          speed (StepSize bigger than 1).
        </Documentation>
      </IntVectorProperty>

    </SourceProxy>
  </ProxyGroup>
  <!-- End Offline Slam -->

  <!-- Begin KeyPointsExtractor -->
  <ProxyGroup name="KeyPointsExtractor">
    <Proxy
      name="SpinningSensorKeypointExtractor"
      class="vtkSpinningSensorKeypointExtractor"
      label="SpinningSensorKeypointExtractor">

      <IntVectorProperty
          name="Neighbor Width"
          command="SetNeighborWidth"
          default_values="4"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Number of neighbors on both sides of current point used to estimate
          the keypoints scores (curvature, angles, depth gap, ...) in each scan
          line
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
          name="Minimum Distance To Sensor"
          command="SetMinDistanceToSensor"
          default_values="3"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Minimum distance (in meters) between a point and the sensor to be
          processed for the keypoint extraction. In other words,
          all points too close from the sensor are automatically
          rejected.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Maximum Sinus To Be Considered As Planar"
          command="SetPlaneSinAngleThreshold"
          default_values="0.5"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          One strategy to consider a point as a planar keypoint is to compute
          the angle between the two lines that fit its previous and next neighborhoods.
          If the angle is close enough to 0° or 180° (sin(Angle) low enough), we consider
          the point as a planar keypoint.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Minimum Sinus To Be Considered As Edge"
          command="SetEdgeSinAngleThreshold"
          default_values="0.86"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          One strategy to consider a point as an edge keypoint is to compute
          the angle between the two lines that fit its previous and next neighborhoods.
          If the angle is close enough to 90° (sin(Angle) high enough), we consider
          the point as an edge keypoint.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Minimum Saliency Distance To Be Considered As Edge"
          command="SetEdgeSaliencyThreshold"
          default_values="1.5"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          One strategy to consider a point as an edge keypoint is to compute
          the depth gap between the point and its far background neighborhhod.
          If the gap is big enough, we consider the point as an edge keypoint.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Minimum Intensity Gap To Be Considered As Edge"
          command="SetEdgeIntensityGapThreshold"
          default_values="50."
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          One strategy to consider a point as an edge keypoint is to compute
          the intensity gap between the point and its left and right neighbors.
          If the gap is big enough, we consider the point as an edge keypoint.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Minimum Depth Gap To Be Considered As Edge"
          command="SetEdgeDepthGapThreshold"
          default_values="0.15"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          One strategy to consider a point as an edge keypoint is to compute
          the gap between the point and its neighborhood. Its left and right
          neighborhoods are fitted with a line and then we compute the gap as
          being the distance between the point and the fitted lines. If the gap
          is big enough, we consider the point as an edge keypoint
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
          name="Angle Resolution Between Two Firings"
          command="SetAngleResolution"
          default_values="0.00698"
          number_of_elements="1"
          panel_visibility="advanced">
        <Documentation>
          Azimutal angle resolution of the Lidar sensor (radians). This angle
          resolution is used to compute an expected distance between two
          consecutives firings. From this expected distance, we can detect
          if a point is a potential gap and launch more investigation
        </Documentation>
      </DoubleVectorProperty>

      <PropertyGroup label="Spinning Sensor Keypoints Extractor Parameters">
        <Property name="Neighbor Width" />
        <Property name="Minimum Distance To Sensor" />
        <Property name="Maximum Sinus To Be Considered As Planar" />
        <Property name="Minimum Sinus To Be Considered As Edge" />
        <Property name="Minimum Saliency Distance To Be Considered As Edge" />
        <Property name="Minimum Intensity Gap To Be Considered As Edge" />
        <Property name="Minimum Depth Gap To Be Considered As Edge" />
        <Property name="Angle Resolution Between Two Firings" />
      </PropertyGroup>

    </Proxy>
  </ProxyGroup>
  <!-- End KeyPointsExtractor -->

</ServerManagerConfiguration>