# Default variables/parameters for all jobs
variables:
  data_folder: /usr/src/app/data
  cmake_option_GENERATOR: -GNinja
  cmake_option_build_type: -DCMAKE_BUILD_TYPE=Release
  cmake_option_shared: -DBUILD_SHARED_LIBS=ON
  deps_install_path: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_SB/install"
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 20

stages:
  - superbuild
  - slam_lib
  - paraview_wrapping

# Windows specific configuration
.windows_runner_config:
  before_script:
    # To use the Microsoft C++ Toolset from the command line, some environment variables need to be set.
    # To help with this, Microsoft provides the vcvarsall.bat script that sets different environment vars.
    # (see https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=vs-2019)
    # However, the script is made for the command shell and the job run in a powershell.
    # A powershell can run a command shell script by using the `cmd` executable, but this implies
    # that environment variables are only set in the child cmd.exe instance. The environment variables need to
    # be updated in the powershell too. This is why the function Invoke-CmdScript is needed as it invokes
    # the script and updates the powershell environment.
    # This is taken from https://stackoverflow.com/a/41399983
    - | # pipe allows to use multiline command, see https://gitlab.com/gitlab-org/gitlab-runner/issues/166
      function Invoke-CmdScript {
        param(
          [String] $scriptName
        )
        $cmdLine = """$scriptName"" $args & set"
        & $Env:SystemRoot\system32\cmd.exe /c $cmdLine |
          Select-String '^([^=]*)=(.*)$' |
          ForEach-Object {
            $varName = $_.Matches[0].Groups[1].Value
            $varValue = $_.Matches[0].Groups[2].Value
            Set-Item Env:$varName $varValue
        }
      }
    - Invoke-CmdScript "${vcvarsall_script_location}/vcvarsall.bat" $architecture
  variables:
    # Paraview only supports MSVC 2019 and Ninja generator for now
    vcvarsall_script_location: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build'
    architecture: x86_amd64

# ------------------------------------------------------------------------------
#   Build superbuild
# ------------------------------------------------------------------------------

# Clean superbuild
clean_superbuild:
  tags: []
  stage: superbuild
  needs: []
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_SB"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
  script:
    - cmake -E remove_directory $build_dir
    - cmake -E make_directory $build_dir

# Build superbuild
.build_superbuild:
  stage: superbuild
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_SB"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
  script:
    - cd $build_dir
    - cmake -E make_directory install
    - echo "cmake "${CI_PROJECT_DIR}/slam-superbuild"
      $cmake_option_GENERATOR
      $cmake_option_build_type
      -DCMAKE_INSTALL_PREFIX=${deps_install_path}""
    - cmake "${CI_PROJECT_DIR}/slam-superbuild"
      $cmake_option_GENERATOR
      $cmake_option_build_type
      -DCMAKE_INSTALL_PREFIX=${deps_install_path}"
    - cmake --build . -j 4

# Build superbuild on Windows
# This job allows to store the dependencies
# for next CI run on windows runners
windows_build_superbuild:
  tags: [windows]
  extends:
  - .windows_runner_config
  - .build_superbuild

# Build superbuild on Linux
# This job allows to store the dependencies
# for next CI run on linux runners
linux_build_superbuild:
  tags: [linux]
  extends:
    - .build_superbuild

# ------------------------------------------------------------------------------
#   Build core LidarSlam lib
# ------------------------------------------------------------------------------

.slam_lib:
  stage: slam_lib
  needs: []
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_slam_lib"
    slam_cmake_option_Eigen_INCLUDE_DIR: "-DEigen_INCLUDE_DIR=${deps_install_path}/include"
    slam_cmake_option_Eigen_DIR: "-DEigen3_DIR=${deps_install_path}/share/eigen3/cmake"
    slam_cmake_option_glog_DIR: "-Dglog_DIR=${deps_install_path}/lib/cmake/glog"
    slam_cmake_option_Ceres_DIR: "-DCeres_DIR=${deps_install_path}/lib/cmake/Ceres"
    slam_cmake_option_nanoflann_DIR: "-Dnanoflann_DIR=${deps_install_path}/share/nanoflann/cmake"
    slam_cmake_option_BOOST_ROOT: "-DBOOST_ROOT=${deps_install_path}/"
    slam_cmake_option_Boost_STATIC: "-DBoost_USE_STATIC_LIBS=OFF"
    slam_cmake_option_g2o_DIR: "-Dg2o_DIR=${deps_install_path}/lib/cmake/g2o"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
  script:
    - cmake -E remove_directory $build_dir
    - cmake -E make_directory $build_dir
    - cd $build_dir
    - echo "cmake $CI_PROJECT_DIR
      $cmake_option_GENERATOR
      $cmake_option_build_type
      $cmake_option_shared
      $slam_cmake_option_Eigen_INCLUDE_DIR
      $slam_cmake_option_Eigen_DIR
      $slam_cmake_option_glog_DIR
      $slam_cmake_option_Ceres_DIR
      $slam_cmake_option_nanoflann_DIR
      $slam_cmake_option_BOOST_ROOT
      $slam_cmake_option_Boost_STATIC
      $slam_cmake_option_PCL_DIR
      $slam_cmake_option_g2o_DIR"
    - cmake $CI_PROJECT_DIR
      $cmake_option_GENERATOR
      $cmake_option_build_type
      $cmake_option_shared
      $slam_cmake_option_Eigen_INCLUDE_DIR
      $slam_cmake_option_Eigen_DIR
      $slam_cmake_option_glog_DIR
      $slam_cmake_option_Ceres_DIR
      $slam_cmake_option_nanoflann_DIR
      $slam_cmake_option_BOOST_ROOT
      $slam_cmake_option_Boost_STATIC
      $slam_cmake_option_PCL_DIR
      $slam_cmake_option_g2o_DIR
    - cmake --build $build_dir -j 4

# Build core LidarSlam lib on Linux
linux_slam_lib:
  tags: [linux, nodocker]
  extends:
    - .slam_lib
  variables:
    slam_cmake_option_PCL_DIR: "-DPCL_DIR=${deps_install_path}/share/pcl-1.10"

# Build core LidarSlam lib on Windows
windows_slam_lib:
  tags: [windows]
  extends:
  - .windows_runner_config
  - .slam_lib
  variables:
    slam_cmake_option_PCL_DIR: "-DPCL_DIR=${deps_install_path}/cmake"

# ------------------------------------------------------------------------------
#   Build PV wrapping
# ------------------------------------------------------------------------------

# Note : Paraview, qt, zlib, png and python deps
# should be configured in runners' toml files.
.paraview_wrapping:
  stage: paraview_wrapping
  needs: []
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_paraview_wrapping"
    slam_cmake_option_Boost_STATIC: "-DBoost_USE_STATIC_LIBS=OFF"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
  script:
    - cmake -E remove_directory $build_dir
    - cmake -E make_directory $build_dir
    - cd $build_dir
    - echo "cmake $CI_PROJECT_DIR
      $cmake_option_GENERATOR
      $cmake_option_build_type
      $cmake_option_shared
      -DSLAM_PARAVIEW_PLUGIN=ON
      $slam_cmake_option_Eigen_INCLUDE_DIR
      $slam_cmake_option_Eigen_DIR
      $slam_cmake_option_glog_DIR
      $slam_cmake_option_Ceres_DIR
      $slam_cmake_option_nanoflann_DIR
      $slam_cmake_option_BOOST_ROOT
      $slam_cmake_option_Boost_DIR
      $slam_cmake_option_Boost_STATIC
      $slam_cmake_option_PCL_DIR
      $slam_cmake_option_g2o_DIR
      $slam_cmake_option_ParaView_DIR
      $slam_cmake_option_Qt5_DIR
      $slam_cmake_option_ZLIB_LIB
      $slam_cmake_option_ZLIB_INC
      $slam_cmake_option_PNG_LIB
      $slam_cmake_option_PNG_PNG_INC
      $slam_cmake_option_PYTHON"
    - cmake $CI_PROJECT_DIR
      $cmake_option_GENERATOR
      $cmake_option_build_type
      $cmake_option_shared
      -DSLAM_PARAVIEW_PLUGIN=ON
      $slam_cmake_option_Eigen_INCLUDE_DIR
      $slam_cmake_option_Eigen_DIR
      $slam_cmake_option_glog_DIR
      $slam_cmake_option_Ceres_DIR
      $slam_cmake_option_nanoflann_DIR
      $slam_cmake_option_BOOST_ROOT
      $slam_cmake_option_Boost_DIR
      $slam_cmake_option_Boost_STATIC
      $slam_cmake_option_PCL_DIR
      $slam_cmake_option_g2o_DIR
      $slam_cmake_option_ParaView_DIR
      $slam_cmake_option_Qt5_DIR
      $slam_cmake_option_ZLIB_LIB
      $slam_cmake_option_ZLIB_INC
      $slam_cmake_option_PNG_LIB
      $slam_cmake_option_PNG_PNG_INC
      $slam_cmake_option_PYTHON
    - cmake --build $build_dir -j 4

# Build PV wrapping on Linux
linux_paraview_wrapping:
  tags: [linux, paraview]
  extends:
    - .paraview_wrapping

# Build PV wrapping on Windows
windows_paraview_wrapping:
  tags: [windows, paraview]
  extends:
    - .windows_runner_config
    - .paraview_wrapping
